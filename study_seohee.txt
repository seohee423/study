240213

<일러스트>
JPEG, PNG, RAW, SVG, 래스터, 백터 등 다양한 이미지 파일 유형의 종류와 특징, 용도
파일 유형을 각 프로젝트에 적합하게 활용하기

240214

[일러스트]
일러스트 툴 활용법 및 단축키 익히기, 펜툴 사용법 연습

ctrl + 1 : 비율 100%
ctrl + [ or ] : 순서 앞, 뒤로 이동
ctrl + G : 그룹화
ctrl + shift + G : 그룹 해제
ctrl + 도형 클릭 : 펜툴 끊어 그리기

[git]
프로그램 설치와 환경설정, 저장소 생성법 학습
add, commit, status, log 등 명령어 활용하여 파일 생성하고 내용 추가하기

$ git add 파일명 (수정할 파일 등록)
$ git commit(기록 의미) –m(메시지 의미) “내용”
$ git status(저장소 내 현재 상태 확인) => branch 개수, 파일 상태 등 결과 표시
$ git log(파일의 변경된 내용 확인 목적) *시간 역순으로 표시(맨 아래부터 처음 작업내역)
$ git log —oneline : 작업내역 표시
$ git add . : git 저장소 내 변경사항이 있는 모든 파일 추가
$ git diff : 파일 내 변경된 내용 상세하게 표시 (status보다 구체적) 
- 수정하였으나 아직 stage하지 않은 파일의 변경점을 보여줌
$ git commit –am : add, commit 동시에 (두 번째 commit 부터만 사용 가능)
$ git revert +커밋 아이디 : 복구하고 싶은 커밋으로 이동
*revert 사용 전 git log —oneline 작성하여 각 단계별 커밋 아이디 확인 필요

240215

[일러스트]
- 패스 그리기 연습
- 펜툴 방향선 이동
- 패스 옵션 변경(둥근 모서리, 점선)
- 기준점 추가&삭제를 활용한 패스 변형

ctrl + D : 방금 진행한 작업 반복
ctrl + J : 서로 떨어져 있는 기준점 연결 (직접 선택 도구 A로 기준점 선택 후 사용)
[, ] : 지우개 툴, 브러쉬 크기 조정
ctrl + Y : 패스 라인만 확인

[git]
$ mkdir 폴더명 : 폴더 생성
$git status –s : 파일 삭제
$ git branch dev : 브랜치 생성
$ git branch —list  : 브랜치 위치 확인
$ git switch  dev1 : dev1 브랜치로 이동
*git switch - : -는 직전에 작업한 브랜치로 이동

main / dev / sub : 각각 다른 영역이라고 이해하면 됨
main – dev – sub 연속으로 생성 (or) main < dev, sub 형식으로 생성 가능

git switch –c dev : 브랜치 생성 후 바로 이동
git branch —list : 브랜치 리스트와 현재 위치 확인 가능

git merge 합치고자 하는 브랜치 이름 : 현재 위치한 브랜치와 작성한 이름의 브랜치를 합침
git branch –D 지울 브랜치 이름 : 브랜치 강제로 삭제 (지울 브랜치 밖에 있어야 함)

Q. 브랜치 합친 뒤에도 브랜치가 남아있는 이유는?
=> 합치고 사라지는게 아니라 별개의 브런치로 존재, 없애고 싶다면 삭제해야 함
* :wq 누르면 텍스트에디터 화면에서 빠져나올 수 있음

git branch –m 현재브랜치이름 바꿀브랜치이름 : 브랜치 이름 변경

git config —unset —global user.name
git config —unset —global user.email
: 로컬에 저장된 정보 삭제
git remote rm origin : 깃허브 링크
 정보 삭제

240216

[일러스트]
패스파인더 활용하여 패스 합치고 나누기 (divide, trim, merge, crop, outline 등)
- unite : 모든 패스를 합쳐 하나의 패스로 병합
- minus front : 패스가 겹치는 부분을 잘라냄
- intersect : 패스가 겹치는 부분을 남기고 나머지 부분을 잘라냄
- exclude : 패스 반전
- devide : 패스 분할, 겹치는 부분을 각 조각으로
- trim : 패스 분할, 색상 구분에 따라
- merge : 같은 색상끼리 합치고 다른 색상끼리는 나누는 기능
- outline : 면 색 제거, 겹쳐진 패스에 따라 선 분할
- minus back : 맨 위 패스에서 겹치지 않은 부분을 제외한 나머지 부분 제거
*shape builder tool : 병합할 패스를 드래그하면 선택된 영역 삭제 및 병합

▶ 패스파인더 활용하여 스마트폰 앱 아이콘 제작하rl

정렬 도구 align to selection과 align to artboard, align to kye 차이
 : 선택한 오브젝트 간의 정렬 / 아트보드 전체 기준 정렬

[git]
- 깃허브 리포지터리 생성, 연결법
⓵ 사용자 정보 입력 (이름, 이메일)
⓶ 파일 add 후 commit / git status –s : 진행중인 작업의 상태 확인 (A : add 완료)
⓷ 깃허브 홈페이지에서 new 생성
⓸ 링크 업로드하여 연결 
⓹ 깃허브에서 제공하는 명령어 붙혀넣기 (1, 3번만 / 2번은 main으로 변경이라 사용 X)
⓺ git remote add origin https://github.com/seohee423/240216.git
⓻ git push -u origin main : 로컬 깃 저장소의 파일 깃허브로 업로드(추가 업로드 O)

- 깃허브 리포지터리 삭제
① 깃허브 settings 메뉴 클릭, 하단 delete this repository 클릭
② 이름/파일명 복사 후 붙혀넣기, 비밀번호 입력 후 삭제

- 온라인 저장소만 존재하고 로컬에는 같은 저장소가 없을 때
① $ cd ../ : 상위 폴더로 이동
② git clone +code 링크 복붙하여 로컬 저장소에 온라인 저장소 내역 이동

git push : 로컬 저장소 => 온라인 저장소 업로드
git pull : 온라인 저장소 => 로컬 저장소 백업

240219

[일러스트]
- 펜툴과 클리핑 마스크 기능을 사용해 이미지 잘라내기
*클리핑 마스크 조건 : 잘라낼 이미지의 레이어가 패스 아래에 위치, 닫힌 패스, 하나의 패스만 마스크 역할 수행

type 메뉴 - create outline (ctrl + shift + O)
 : 폰트를 일반 패스로 변환, 파일을 받을 상대에게 폰트가 없을 때 사용

Image trace로 이미지 변환, 컴파운드 패스로 변경

blend 툴 : 패스를 연결

[git]
- 깃 허브, 로컬 저장소 연결 복습

[html] - 기본 구조

■ DTD 선언 : 브라우저에게 웹 문서의 종류를 알려주는 선언, 브라우저의 호환성과 웹표준을 위해 반드시 작성 / html 문서 최상단에 작성

<html lang="ko">
 <head>
  <!-- "utf-8: 문서에 맞는 언어로 보여줌 -->
  <meta charset="uft-8">
  <title>웹 페이지의 탭 부분</title>
 </head>

■ <body>와 </body> 사이에 보여지고자 하는 내용을 넣어야 함
■ <br> : 줄 바꿈 의미

■ 시맨틱 마크업 Semantic Markup<br>
  비주얼에 집중하기보다 태그가 가진 의미에 집중하여 콘텐츠 자체에 의비를 부여하는 것. 웹 접근성 부분에서도 중요

<tag>태그</tag>
<br> 열린태그
 <br/>
  </body>
</html> 

240220

[일러스트]
- 폰트 자료: 눈누, 구글폰트
- 텍스트 입력 후 편집하기(밑줄, 굵기, 자간, 행간, 색상 등)
- 텍스트가 포함된 ai파일을 공유할 경우 오류가 발생하지 않도록 확장하여 전송
- 브러쉬, 펜툴, 텍스트를 활용한 배너 제작하기

[html]

h : 문단 태그 (굵은 글씨/제목, 소제목 등에 활용)
p : 문장 태그 (가는 글씨)
&lt;, &gt; : 태그 내에서 <>안에 내용을 작성하고자 할 때 <> 대신 특수기호 안에 넣어 작성
<br> : 줄 바꿈이 필요한 위치에 사용, 열린태그이므로 </br> 불필요 
 *<br/>로 사용 가능, 반응형 웹에서는 span 태그 주로 활용
<hr> : 내용 사이에 줄 바꿈이 필요할 때
<cite></cite> : html4에서 인용태그로 사용
 *cite : html5에서 인용의 출처(링크, 작품의 제목 등)를 정의하는 속성
<blockquote></blockquote> : 인용 관련
<strong></strong> : 강한강조 표시를 하고 싶은 영역 앞뒤에 사용 (굵은 글씨로 표현)
*<p><strong>은 가능하지만 <strong><p> 순으로 사용 불가능
<em></em> : 일반 강조 표시를 할 영역 앞 뒤로 사용 (글씨 기울여져서 표현)